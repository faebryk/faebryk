#!/usr/bin/env python3

"""
This file generates faebryk/src/faebryk/library/__init__.py
"""

import glob
import logging
import os
from pathlib import Path

logger = logging.getLogger(__name__)

DIR = Path(__file__).parent.parent.parent / "src" / "faebryk" / "library"
OUT = DIR / "_F.py"


def main():
    assert DIR.exists()

    logger.info(f"Scanning {DIR} for modules")

    module_files = glob.glob(str(DIR / "*.py"))
    module_files = [
        os.path.basename(f)[:-3] for f in module_files if os.path.basename(f) != "_F.py"
    ]

    logger.info(f"Found {len(module_files)} modules")

    modules_out: dict[str, str] = {}

    # Import each module and add its class to the current namespace
    # for module_name in module_files:
    #    module = importlib.import_module(
    #        f"faebryk.library.{module_name}"  # , package=__name__
    #    )
    #    class_name = module_name
    #    if hasattr(module, class_name):
    #        # globals()[class_name] = getattr(module, class_name)
    #        modules_out[module_name] = class_name

    modules_out = {module_name: module_name for module_name in module_files}

    logger.info(f"Found {len(modules_out)} classes")

    OUT.write_text(
        "# This file is part of the faebryk project\n"
        "# SPDX-License-Identifier: MIT\n"
        "\n"
        '"""\n'
        "This file is autogenerated by tools/library/gen_F.py\n"
        "This is the __init__.py file of the library\n"
        "All modules are in ./<module>.py with name class <module>\n"
        "Export all <module> classes here\n"
        "Do it programmatically instead of specializing each manually\n"
        "This way we can add new modules without changing this file\n"
        '"""\n'
        "\n"
        "# Disable ruff warning for whole block\n"
        "# flake8: noqa: F401\n"
        "# flake8: noqa: I001\n"
        "# flake8: noqa: E501\n"
        "\n"
        + "\n".join(
            f"from faebryk.library.{module} import {class_}"
            for module, class_ in sorted(modules_out.items(), key=lambda x: x[0])
        )
        + "\n"
    )


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
