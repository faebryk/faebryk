import sys
import logging
import re
import hashlib
import pprint

import parse

logging.basicConfig(stream=sys.stderr, level=logging.INFO)
logger = logging.getLogger("sym_gen")
logger.setLevel(logging.DEBUG)


def sanitize_name(raw):
    sanitized = raw

    sanitized = sanitized.replace("+", "plus")
    sanitized = sanitized.replace("-", "minus")
    sanitized = sanitized.replace(".", "_")

    if re.match("^[a-zA-Z_]", sanitized) is None:
        sanitized = "_" + sanitized

    if re.match("^[a-zA-Z_]+[a-zA-Z_0-9]*$", sanitized) is not None:
        return sanitized

    to_escape = re.findall("[^a-zA-Z_0-9]", sanitized)
    if len(to_escape) > 0:
        logger.error(f"Unescapable pin name in {raw}: [{to_escape}]")

    return sanitized


def generate_component(symbol, annotation_properties):
    annotation = "\n    ".join(
        [f"{key}: {val}" for key, val in annotation_properties.items()]
    )
    name = sanitize_name(symbol["name"])

    # interfaces
    raw_pins = {
        no: pin
        for symbol_2 in symbol.get("symbols", {}).values()
        for no, pin in symbol_2.get("pins", {}).items()
    }
    pins = {pin["alt_number"]: pin for no, pin in raw_pins.items()}

    faebryk_if_map = {}
    unnamed_if_cnt = 0
    for no, pin in pins.items():
        if pin["name"] == "~":
            faebryk_if_map[no] = f"_unnamed[{unnamed_if_cnt}]"
            unnamed_if_cnt += 1
        else:
            faebryk_if_map[no] = sanitize_name(pin["name"])

    ifs_exp = "\n        ".join(
        [
            f"self.IFs.{_if} = Electrical()"
            for pinno, _if in faebryk_if_map.items()
            if pins[pinno]["name"] != "~"
        ]
    )

    # raw
    raw_symbol = pprint.pformat(symbol["_raw"], indent=4, width=88).replace(
        "\n", "\n        "
    )

    #
    traits = []

    # footprint & footprint pinmap
    footprint_str = symbol["properties"]["Footprint"].replace('"', "")
    if footprint_str != "":
        footprint_trait = 'has_kicad_manual_footprint("{}")'.format(footprint_str)
        traits.append(footprint_trait)
        pinmap_trait = "has_defined_footprint_pinmap({})".format(
            "{"
            + ", ".join(
                [f"{pinno}: self.IFs.{_if}" for pinno, _if in faebryk_if_map.items()]
            )
            + "}"
        )
        traits.append(pinmap_trait)

    #
    traits.append(
        'has_defined_kicad_ref("{}")'.format(symbol["properties"]["Reference"])
    )

    traits_exp = "\n        ".join([f"self.add_trait({trait})" for trait in traits])

    template = f"""
class {name}(Component):
    \"\"\"
    Generated by symbol_converter
    {annotation}
    source:
        {raw_symbol} 
    \"\"\"

    def _setup_traits(self):
        {traits_exp}
        return

    def _setup_interfaces(self):
        self.IFs.add_all(times({unnamed_if_cnt}, Electrical))
        {ifs_exp}

    def __new__(cls, *args, **kwargs):
        self = super().__new__(cls)
        self._setup_traits()
        return self

    def __init__(self):
        super().__init__()

        self._setup_interfaces()
    """
    return template


logger.info("hi")
logger.info("Parsing & Converting...")

if len(sys.argv) == 1:
    filepath = "/usr/share/kicad/symbols/Device.kicad_sym"
else:
    filepath = sys.argv[1]

with open(filepath, "r") as f:
    raw_sexp = "".join(f.readlines())

file_hash = hashlib.sha1(raw_sexp.encode("utf-8")).hexdigest()

lib = parse.parse_symbol_lib(parse.parse_sexp(raw_sexp))
logger.info("Found {} symbols".format(len(lib["symbols"])))


components = [
    generate_component(
        symbol,
        {
            "filepath": filepath,
            "hash": file_hash,
        },
    )
    for symbol in lib["symbols"].values()
]

output = ""
output += """\"\"\"
Generated by symbol_converter
\"\"\""""
output += "\n"
output += """
from faebryk.library.core import Component
from faebryk.library.library.interfaces import Electrical
from faebryk.library.util import times
from faebryk.library.traits.component import has_defined_footprint_pinmap
from faebryk.library.kicad import has_kicad_manual_footprint, has_defined_kicad_ref
"""
output += "\n".join(components)

print(output)
